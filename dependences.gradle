ext {
    appConfig = [
            compileSdkVersion: 28,
            minSdkVersion    : 19,
            targetSdkVersion : 28,
            versionCode      : 1,
            versionName      : "1.0"
    ]

    depVer = [
            support           : '28.0.0',
            junit             : '4.12',
            androidTest       : '1.0.2',
            espresso          : '3.0.2',
            constraint_layout : '1.1.3',
            smart_refresh     : '1.1.0-alpha-18',
            kotlinx_coroutines: '1.2.1',
            auto_service      : "1.0-rc7",
            auto_common       : "0.10",
            javapoet          : "1.10.0",
            androidx          : "1.1.0",
            room_version      : '2.2.5'
    ]

    support = [
            design           : 'com.google.android.material:material:1.0.0',
            appcompat        : 'androidx.appcompat:appcompat:1.0.0',
            constraint_layout: 'androidx.constraintlayout:constraintlayout:1.1.3'
    ]

    androidx = [
            annotations  : "androidx.annotation:annotation:${depVer.androidx}",
            room_runtime : "androidx.room:room-runtime:${depVer.room_version}",
            room_compiler: "androidx.room:room-compiler:${depVer.room_version}"
    ]

    compileAndroid = "com.google.android:android:4.1.1.4"

    test = [
            junit   : "junit:junit:${depVer.junit}",
            runner  : 'androidx.test.ext:junit:1.1.1',
            rules   : 'androidx.test:rules:1.1.1',
            espresso: 'androidx.test.espresso:espresso-core:3.1.0'
    ]

    third = [
            kotlin                   : "org.jetbrains.kotlin:kotlin-stdlib-jdk7: ${kotlin_version}",
            smart_refresh            : "com.scwang.smartrefresh:SmartRefreshLayout:${depVer.smart_refresh}",
            kotlin_coroutines_core   : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${depVer.kotlinx_coroutines}",
            kotlin_coroutines_android: "org.jetbrains.kotlinx:kotlinx-coroutines-android:${depVer.kotlinx_coroutines}",
            // AutoService 会自动在META-INF文件夹下生成Processor配置信息文件，该文件里就是实现该服务接口的具体实现类。
            // 而当外部程序装配这个模块的时候，就能通过该jar包META-INF/services/里的配置文件找到具体的实现类名，并装载实例化，完成模块的注入。
            // 基于这样一个约定就能很好的找到服务接口的实现类，而不需要再代码里制定，方便快捷。
            auto_service             : "com.google.auto.service:auto-service:${depVer.auto_service}",
            auto_common              : "com.google.auto:auto-common:${depVer.auto_common}",
            javapoet                 : "com.squareup:javapoet:${depVer.javapoet}"
    ]

    debug = [
            stetho: "com.facebook.stetho:stetho:1.5.0"
    ]
}